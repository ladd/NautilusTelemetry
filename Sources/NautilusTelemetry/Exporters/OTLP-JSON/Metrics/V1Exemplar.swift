//
// V1Exemplar.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
	import AnyCodable
#endif

@available(*, deprecated, renamed: "OTLP.V1Exemplar")
typealias V1Exemplar = OTLP.V1Exemplar

extension OTLP {
	/** A representation of an exemplar, which is a sample input measurement. Exemplars also hold information about the environment when the measurement was recorded, for example the span and trace ID of the active span when the exemplar was recorded. */
	struct V1Exemplar: Codable, Hashable {
		var filteredAttributes: [V1KeyValue]?
		/** Value is UNIX Epoch time in nanoseconds since 00:00:00 UTC on 1 January 1970. */
		var timeUnixNano: String?
		var asDouble: Double?
		var asInt: String?
		/** (Optional) Span ID of the exemplar trace. span_id may be missing if the measurement is not recorded inside a trace or if the trace is not sampled. */
		var spanId: Data?
		/** (Optional) Trace ID of the exemplar trace. trace_id may be missing if the measurement is not recorded inside a trace or if the trace is not sampled. */
		var traceId: Data?

		init(filteredAttributes: [V1KeyValue]? = nil, timeUnixNano: String? = nil, asDouble: Double? = nil, asInt: String? = nil, spanId: Data? = nil, traceId: Data? = nil) {
			self.filteredAttributes = filteredAttributes
			self.timeUnixNano = timeUnixNano
			self.asDouble = asDouble
			self.asInt = asInt
			self.spanId = spanId
			self.traceId = traceId
		}

		enum CodingKeys: String, CodingKey, CaseIterable {
			case filteredAttributes
			case timeUnixNano
			case asDouble
			case asInt
			case spanId
			case traceId
		}

		// Encodable protocol methods

		func encode(to encoder: Encoder) throws {
			var container = encoder.container(keyedBy: CodingKeys.self)
			try container.encodeIfPresent(filteredAttributes, forKey: .filteredAttributes)
			try container.encodeIfPresent(timeUnixNano, forKey: .timeUnixNano)
			try container.encodeIfPresent(asDouble, forKey: .asDouble)
			try container.encodeIfPresent(asInt, forKey: .asInt)
			try container.encodeIfPresent(spanId, forKey: .spanId)
			try container.encodeIfPresent(traceId, forKey: .traceId)
		}
	}
}
