openapi: 3.0.1
info:
  title: opentelemetry/proto/collector/metrics/v1/metrics_service.proto
  version: version not set
servers:
- url: /
tags:
- name: MetricsService
paths:
  /v1/metrics:
    post:
      tags:
      - MetricsService
      summary: |-
        For performance reasons, it is recommended to keep this RPC
        alive for the entire life of the application.
      operationId: MetricsService_Export
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/v1ExportMetricsServiceRequest'
        required: true
      responses:
        "200":
          description: A successful response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/v1ExportMetricsServiceResponse'
        default:
          description: An unexpected error response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/rpcStatus'
      x-codegen-request-body-name: body
components:
  schemas:
    ExponentialHistogramDataPointBuckets:
      type: object
      properties:
        offset:
          type: integer
          description: |-
            Offset is the bucket index of the first entry in the bucket_counts array.

            Note: This uses a varint encoding as a simple form of compression.
          format: int32
        bucketCounts:
          type: array
          description: |-
            bucket_counts is an array of count values, where bucket_counts[i] carries
            the count of the bucket at index (offset+i). bucket_counts[i] is the count
            of values greater than base^(offset+i) and less than or equal to
            base^(offset+i+1).

            Note: By contrast, the explicit HistogramDataPoint uses
            fixed64.  This field is expected to have many buckets,
            especially zeros, so uint64 has been selected to ensure
            varint encoding.
          items:
            type: string
            format: uint64
      description: |-
        Buckets are a set of bucket counts, encoded in a contiguous array
        of counts.
    SummaryDataPointValueAtQuantile:
      type: object
      properties:
        quantile:
          type: number
          description: |-
            The quantile of a distribution. Must be in the interval
            [0.0, 1.0].
          format: double
        value:
          type: number
          description: |-
            The value at the given quantile of a distribution.

            Quantile values must NOT be negative.
          format: double
      description: |-
        Represents the value at a given quantile of a distribution.

        To record Min and Max values following conventions are used:
        - The 1.0 quantile is equivalent to the maximum value observed.
        - The 0.0 quantile is equivalent to the minimum value observed.

        See the following issue for more context:
        https://github.com/open-telemetry/opentelemetry-proto/issues/125
    protobufAny:
      type: object
      properties:
        '@type':
          type: string
      additionalProperties:
        type: object
    rpcStatus:
      type: object
      properties:
        code:
          type: integer
          format: int32
        message:
          type: string
        details:
          type: array
          items:
            $ref: '#/components/schemas/protobufAny'
    v1AggregationTemporality:
      type: string
      description: |-
        AggregationTemporality defines how a metric aggregator reports aggregated
        values. It describes how those values relate to the time interval over
        which they are aggregated.

         - AGGREGATION_TEMPORALITY_UNSPECIFIED: UNSPECIFIED is the default AggregationTemporality, it MUST not be used.
         - AGGREGATION_TEMPORALITY_DELTA: DELTA is an AggregationTemporality for a metric aggregator which reports
        changes since last report time. Successive metrics contain aggregation of
        values from continuous and non-overlapping intervals.

        The values for a DELTA metric are based only on the time interval
        associated with one measurement cycle. There is no dependency on
        previous measurements like is the case for CUMULATIVE metrics.

        For example, consider a system measuring the number of requests that
        it receives and reports the sum of these requests every second as a
        DELTA metric:

          1. The system starts receiving at time=t_0.
          2. A request is received, the system measures 1 request.
          3. A request is received, the system measures 1 request.
          4. A request is received, the system measures 1 request.
          5. The 1 second collection cycle ends. A metric is exported for the
             number of requests received over the interval of time t_0 to
             t_0+1 with a value of 3.
          6. A request is received, the system measures 1 request.
          7. A request is received, the system measures 1 request.
          8. The 1 second collection cycle ends. A metric is exported for the
             number of requests received over the interval of time t_0+1 to
             t_0+2 with a value of 2.
         - AGGREGATION_TEMPORALITY_CUMULATIVE: CUMULATIVE is an AggregationTemporality for a metric aggregator which
        reports changes since a fixed start time. This means that current values
        of a CUMULATIVE metric depend on all previous measurements since the
        start time. Because of this, the sender is required to retain this state
        in some form. If this state is lost or invalidated, the CUMULATIVE metric
        values MUST be reset and a new fixed start time following the last
        reported measurement time sent MUST be used.

        For example, consider a system measuring the number of requests that
        it receives and reports the sum of these requests every second as a
        CUMULATIVE metric:

          1. The system starts receiving at time=t_0.
          2. A request is received, the system measures 1 request.
          3. A request is received, the system measures 1 request.
          4. A request is received, the system measures 1 request.
          5. The 1 second collection cycle ends. A metric is exported for the
             number of requests received over the interval of time t_0 to
             t_0+1 with a value of 3.
          6. A request is received, the system measures 1 request.
          7. A request is received, the system measures 1 request.
          8. The 1 second collection cycle ends. A metric is exported for the
             number of requests received over the interval of time t_0 to
             t_0+2 with a value of 5.
          9. The system experiences a fault and loses state.
          10. The system recovers and resumes receiving at time=t_1.
          11. A request is received, the system measures 1 request.
          12. The 1 second collection cycle ends. A metric is exported for the
             number of requests received over the interval of time t_1 to
             t_0+1 with a value of 1.

        Note: Even though, when reporting changes since last report time, using
        CUMULATIVE is valid, it is not recommended. This may cause problems for
        systems that do not use start_time to determine when the aggregation
        value was reset (e.g. Prometheus).
      default: AGGREGATION_TEMPORALITY_UNSPECIFIED
      enum:
      - AGGREGATION_TEMPORALITY_UNSPECIFIED
      - AGGREGATION_TEMPORALITY_DELTA
      - AGGREGATION_TEMPORALITY_CUMULATIVE
    v1AnyValue:
      type: object
      properties:
        stringValue:
          type: string
        boolValue:
          type: boolean
        intValue:
          type: string
          format: int64
        doubleValue:
          type: number
          format: double
        arrayValue:
          $ref: '#/components/schemas/v1ArrayValue'
        kvlistValue:
          $ref: '#/components/schemas/v1KeyValueList'
        bytesValue:
          pattern: "^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$"
          type: string
          format: byte
      description: |-
        AnyValue is used to represent any type of attribute value. AnyValue may contain a
        primitive value such as a string or integer or it may contain an arbitrary nested
        object containing arrays, key-value lists and primitives.
    v1ArrayValue:
      type: object
      properties:
        values:
          type: array
          description: Array of values. The array may be empty (contain 0 elements).
          items:
            $ref: '#/components/schemas/v1AnyValue'
      description: |-
        ArrayValue is a list of AnyValue messages. We need ArrayValue as a message
        since oneof in AnyValue does not allow repeated fields.
    v1Exemplar:
      type: object
      properties:
        filteredAttributes:
          title: |-
            The set of key/value pairs that were filtered out by the aggregator, but
            recorded alongside the original measurement. Only key/value pairs that were
            filtered out by the aggregator should be included
          type: array
          items:
            $ref: '#/components/schemas/v1KeyValue'
        timeUnixNano:
          title: time_unix_nano is the exact time when this exemplar was recorded
          type: string
          description: |-
            Value is UNIX Epoch time in nanoseconds since 00:00:00 UTC on 1 January
            1970.
          format: uint64
        asDouble:
          type: number
          format: double
        asInt:
          type: string
          format: int64
        spanId:
          pattern: "^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$"
          type: string
          description: |-
            (Optional) Span ID of the exemplar trace.
            span_id may be missing if the measurement is not recorded inside a trace
            or if the trace is not sampled.
          format: byte
        traceId:
          pattern: "^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$"
          type: string
          description: |-
            (Optional) Trace ID of the exemplar trace.
            trace_id may be missing if the measurement is not recorded inside a trace
            or if the trace is not sampled.
          format: byte
      description: |-
        A representation of an exemplar, which is a sample input measurement.
        Exemplars also hold information about the environment when the measurement
        was recorded, for example the span and trace ID of the active span when the
        exemplar was recorded.
    v1ExponentialHistogram:
      type: object
      properties:
        dataPoints:
          type: array
          items:
            $ref: '#/components/schemas/v1ExponentialHistogramDataPoint'
        aggregationTemporality:
          $ref: '#/components/schemas/v1AggregationTemporality'
      description: |-
        ExponentialHistogram represents the type of a metric that is calculated by aggregating
        as a ExponentialHistogram of all reported double measurements over a time interval.
    v1ExponentialHistogramDataPoint:
      type: object
      properties:
        attributes:
          type: array
          description: |-
            The set of key/value pairs that uniquely identify the timeseries from
            where this point belongs. The list may be empty (may contain 0 elements).
            Attribute keys MUST be unique (it is not allowed to have more than one
            attribute with the same key).
          items:
            $ref: '#/components/schemas/v1KeyValue'
        startTimeUnixNano:
          type: string
          description: |-
            StartTimeUnixNano is optional but strongly encouraged, see the
            the detailed comments above Metric.

            Value is UNIX Epoch time in nanoseconds since 00:00:00 UTC on 1 January
            1970.
          format: uint64
        timeUnixNano:
          type: string
          description: |-
            TimeUnixNano is required, see the detailed comments above Metric.

            Value is UNIX Epoch time in nanoseconds since 00:00:00 UTC on 1 January
            1970.
          format: uint64
        count:
          type: string
          description: |-
            count is the number of values in the population. Must be
            non-negative. This value must be equal to the sum of the "bucket_counts"
            values in the positive and negative Buckets plus the "zero_count" field.
          format: uint64
        sum:
          type: number
          description: |-
            sum of the values in the population. If count is zero then this field
            must be zero.

            Note: Sum should only be filled out when measuring non-negative discrete
            events, and is assumed to be monotonic over the values of these events.
            Negative events *can* be recorded, but sum should not be filled out when
            doing so.  This is specifically to enforce compatibility w/ OpenMetrics,
            see: https://github.com/OpenObservability/OpenMetrics/blob/main/specification/OpenMetrics.md#histogram
          format: double
        scale:
          title: |-
            scale describes the resolution of the histogram.  Boundaries are
            located at powers of the base, where:
          type: integer
          description: |-
            base = (2^(2^-scale))

            The histogram bucket identified by `index`, a signed integer,
            contains values that are greater than (base^index) and
            less than or equal to (base^(index+1)).

            The positive and negative ranges of the histogram are expressed
            separately.  Negative values are mapped by their absolute value
            into the negative range using the same scale as the positive range.

            scale is not restricted by the protocol, as the permissible
            values depend on the range of the data.
          format: int32
        zeroCount:
          type: string
          description: |-
            zero_count is the count of values that are either exactly zero or
            within the region considered zero by the instrumentation at the
            tolerated degree of precision.  This bucket stores values that
            cannot be expressed using the standard exponential formula as
            well as values that have been rounded to zero.

            Implementations MAY consider the zero bucket to have probability
            mass equal to (zero_count / count).
          format: uint64
        positive:
          $ref: '#/components/schemas/ExponentialHistogramDataPointBuckets'
        negative:
          $ref: '#/components/schemas/ExponentialHistogramDataPointBuckets'
        flags:
          type: integer
          description: |-
            Flags that apply to this specific data point.  See DataPointFlags
            for the available flags and their meaning.
          format: int64
        exemplars:
          title: |-
            (Optional) List of exemplars collected from
            measurements that were used to form the data point
          type: array
          items:
            $ref: '#/components/schemas/v1Exemplar'
        min:
          type: number
          description: "min is the minimum value over (start_time, end_time]."
          format: double
        max:
          type: number
          description: "max is the maximum value over (start_time, end_time]."
          format: double
        zeroThreshold:
          type: number
          description: |-
            ZeroThreshold may be optionally set to convey the width of the zero
            region. Where the zero region is defined as the closed interval
            [-ZeroThreshold, ZeroThreshold].
            When ZeroThreshold is 0, zero count bucket stores values that cannot be
            expressed using the standard exponential formula as well as values that
            have been rounded to zero.
          format: double
      description: |-
        ExponentialHistogramDataPoint is a single data point in a timeseries that describes the
        time-varying values of a ExponentialHistogram of double values. A ExponentialHistogram contains
        summary statistics for a population of values, it may optionally contain the
        distribution of those values across a set of buckets.
    v1ExportMetricsPartialSuccess:
      type: object
      properties:
        rejectedDataPoints:
          type: string
          description: |-
            The number of rejected data points.

            A `rejected_<signal>` field holding a `0` value indicates that the
            request was fully accepted.
          format: int64
        errorMessage:
          type: string
          description: |-
            A developer-facing human-readable message in English. It should be used
            either to explain why the server rejected parts of the data during a partial
            success or to convey warnings/suggestions during a full success. The message
            should offer guidance on how users can address such issues.

            error_message is an optional field. An error_message with an empty value
            is equivalent to it not being set.
    v1ExportMetricsServiceRequest:
      type: object
      properties:
        resourceMetrics:
          type: array
          description: |-
            An array of ResourceMetrics.
            For data coming from a single resource this array will typically contain one
            element. Intermediary nodes (such as OpenTelemetry Collector) that receive
            data from multiple origins typically batch the data before forwarding further and
            in that case this array will contain multiple elements.
          items:
            $ref: '#/components/schemas/v1ResourceMetrics'
    v1ExportMetricsServiceResponse:
      type: object
      properties:
        partialSuccess:
          $ref: '#/components/schemas/v1ExportMetricsPartialSuccess'
    v1Gauge:
      type: object
      properties:
        dataPoints:
          type: array
          items:
            $ref: '#/components/schemas/v1NumberDataPoint'
      description: |-
        Gauge represents the type of a scalar metric that always exports the
        "current value" for every data point. It should be used for an "unknown"
        aggregation.

        A Gauge does not support different aggregation temporalities. Given the
        aggregation is unknown, points cannot be combined using the same
        aggregation, regardless of aggregation temporalities. Therefore,
        AggregationTemporality is not included. Consequently, this also means
        "StartTimeUnixNano" is ignored for all data points.
    v1Histogram:
      type: object
      properties:
        dataPoints:
          type: array
          items:
            $ref: '#/components/schemas/v1HistogramDataPoint'
        aggregationTemporality:
          $ref: '#/components/schemas/v1AggregationTemporality'
      description: |-
        Histogram represents the type of a metric that is calculated by aggregating
        as a Histogram of all reported measurements over a time interval.
    v1HistogramDataPoint:
      type: object
      properties:
        attributes:
          type: array
          description: |-
            The set of key/value pairs that uniquely identify the timeseries from
            where this point belongs. The list may be empty (may contain 0 elements).
            Attribute keys MUST be unique (it is not allowed to have more than one
            attribute with the same key).
          items:
            $ref: '#/components/schemas/v1KeyValue'
        startTimeUnixNano:
          type: string
          description: |-
            StartTimeUnixNano is optional but strongly encouraged, see the
            the detailed comments above Metric.

            Value is UNIX Epoch time in nanoseconds since 00:00:00 UTC on 1 January
            1970.
          format: uint64
        timeUnixNano:
          type: string
          description: |-
            TimeUnixNano is required, see the detailed comments above Metric.

            Value is UNIX Epoch time in nanoseconds since 00:00:00 UTC on 1 January
            1970.
          format: uint64
        count:
          type: string
          description: |-
            count is the number of values in the population. Must be non-negative. This
            value must be equal to the sum of the "count" fields in buckets if a
            histogram is provided.
          format: uint64
        sum:
          type: number
          description: |-
            sum of the values in the population. If count is zero then this field
            must be zero.

            Note: Sum should only be filled out when measuring non-negative discrete
            events, and is assumed to be monotonic over the values of these events.
            Negative events *can* be recorded, but sum should not be filled out when
            doing so.  This is specifically to enforce compatibility w/ OpenMetrics,
            see: https://github.com/OpenObservability/OpenMetrics/blob/main/specification/OpenMetrics.md#histogram
          format: double
        bucketCounts:
          type: array
          description: |-
            bucket_counts is an optional field contains the count values of histogram
            for each bucket.

            The sum of the bucket_counts must equal the value in the count field.

            The number of elements in bucket_counts array must be by one greater than
            the number of elements in explicit_bounds array.
          items:
            type: string
            format: uint64
        explicitBounds:
          type: array
          description: |-
            explicit_bounds specifies buckets with explicitly defined bounds for values.

            The boundaries for bucket at index i are:

            (-infinity, explicit_bounds[i]] for i == 0
            (explicit_bounds[i-1], explicit_bounds[i]] for 0 < i < size(explicit_bounds)
            (explicit_bounds[i-1], +infinity) for i == size(explicit_bounds)

            The values in the explicit_bounds array must be strictly increasing.

            Histogram buckets are inclusive of their upper boundary, except the last
            bucket where the boundary is at infinity. This format is intentionally
            compatible with the OpenMetrics histogram definition.
          items:
            type: number
            format: double
        exemplars:
          title: |-
            (Optional) List of exemplars collected from
            measurements that were used to form the data point
          type: array
          items:
            $ref: '#/components/schemas/v1Exemplar'
        flags:
          type: integer
          description: |-
            Flags that apply to this specific data point.  See DataPointFlags
            for the available flags and their meaning.
          format: int64
        min:
          type: number
          description: "min is the minimum value over (start_time, end_time]."
          format: double
        max:
          type: number
          description: "max is the maximum value over (start_time, end_time]."
          format: double
      description: |-
        HistogramDataPoint is a single data point in a timeseries that describes the
        time-varying values of a Histogram. A Histogram contains summary statistics
        for a population of values, it may optionally contain the distribution of
        those values across a set of buckets.

        If the histogram contains the distribution of values, then both
        "explicit_bounds" and "bucket counts" fields must be defined.
        If the histogram does not contain the distribution of values, then both
        "explicit_bounds" and "bucket_counts" must be omitted and only "count" and
        "sum" are known.
    v1InstrumentationScope:
      type: object
      properties:
        name:
          type: string
          description: An empty instrumentation scope name means the name is unknown.
        version:
          type: string
        attributes:
          type: array
          description: |-
            Additional attributes that describe the scope. [Optional].
            Attribute keys MUST be unique (it is not allowed to have more than one
            attribute with the same key).
          items:
            $ref: '#/components/schemas/v1KeyValue'
        droppedAttributesCount:
          type: integer
          format: int64
      description: |-
        InstrumentationScope is a message representing the instrumentation scope information
        such as the fully qualified name and version.
    v1KeyValue:
      type: object
      properties:
        key:
          type: string
        value:
          $ref: '#/components/schemas/v1AnyValue'
      description: |-
        KeyValue is a key-value pair that is used to store Span attributes, Link
        attributes, etc.
    v1KeyValueList:
      type: object
      properties:
        values:
          type: array
          description: |-
            A collection of key/value pairs of key-value pairs. The list may be empty (may
            contain 0 elements).
            The keys MUST be unique (it is not allowed to have more than one
            value with the same key).
          items:
            $ref: '#/components/schemas/v1KeyValue'
      description: |-
        KeyValueList is a list of KeyValue messages. We need KeyValueList as a message
        since `oneof` in AnyValue does not allow repeated fields. Everywhere else where we need
        a list of KeyValue messages (e.g. in Span) we use `repeated KeyValue` directly to
        avoid unnecessary extra wrapping (which slows down the protocol). The 2 approaches
        are semantically equivalent.
    v1Metric:
      title: |-
        Defines a Metric which has one or more timeseries.  The following is a
        brief summary of the Metric data model.  For more details, see:
      type: object
      properties:
        name:
          type: string
          description: name of the metric.
        description:
          type: string
          description: "description of the metric, which can be used in documentation."
        unit:
          type: string
          description: |-
            unit in which the metric value is reported. Follows the format
            described by http://unitsofmeasure.org/ucum.html.
        gauge:
          $ref: '#/components/schemas/v1Gauge'
        sum:
          $ref: '#/components/schemas/v1Sum'
        histogram:
          $ref: '#/components/schemas/v1Histogram'
        exponentialHistogram:
          $ref: '#/components/schemas/v1ExponentialHistogram'
        summary:
          $ref: '#/components/schemas/v1Summary'
        metadata:
          type: array
          description: |-
            Additional metadata attributes that describe the metric. [Optional].
            Attributes are non-identifying.
            Consumers SHOULD NOT need to be aware of these attributes.
            These attributes MAY be used to encode information allowing
            for lossless roundtrip translation to / from another data model.
            Attribute keys MUST be unique (it is not allowed to have more than one
            attribute with the same key).
          items:
            $ref: '#/components/schemas/v1KeyValue'
      description: |-
        https://github.com/open-telemetry/opentelemetry-specification/blob/main/specification/metrics/data-model.md


        The data model and relation between entities is shown in the
        diagram below. Here, "DataPoint" is the term used to refer to any
        one of the specific data point value types, and "points" is the term used
        to refer to any one of the lists of points contained in the Metric.

        - Metric is composed of a metadata and data.
        - Metadata part contains a name, description, unit.
        - Data is one of the possible types (Sum, Gauge, Histogram, Summary).
        - DataPoint contains timestamps, attributes, and one of the possible value type
          fields.

            Metric
         +------------+
         |name        |
         |description |
         |unit        |     +------------------------------------+
         |data        |---> |Gauge, Sum, Histogram, Summary, ... |
         +------------+     +------------------------------------+

           Data [One of Gauge, Sum, Histogram, Summary, ...]
         +-----------+
         |...        |  // Metadata about the Data.
         |points     |--+
         +-----------+  |
                        |      +---------------------------+
                        |      |DataPoint 1                |
                        v      |+------+------+   +------+ |
                     +-----+   ||label |label |...|label | |
                     |  1  |-->||value1|value2|...|valueN| |
                     +-----+   |+------+------+   +------+ |
                     |  .  |   |+-----+                    |
                     |  .  |   ||value|                    |
                     |  .  |   |+-----+                    |
                     |  .  |   +---------------------------+
                     |  .  |                   .
                     |  .  |                   .
                     |  .  |                   .
                     |  .  |   +---------------------------+
                     |  .  |   |DataPoint M                |
                     +-----+   |+------+------+   +------+ |
                     |  M  |-->||label |label |...|label | |
                     +-----+   ||value1|value2|...|valueN| |
                               |+------+------+   +------+ |
                               |+-----+                    |
                               ||value|                    |
                               |+-----+                    |
                               +---------------------------+

        Each distinct type of DataPoint represents the output of a specific
        aggregation function, the result of applying the DataPoint's
        associated function of to one or more measurements.

        All DataPoint types have three common fields:
        - Attributes includes key-value pairs associated with the data point
        - TimeUnixNano is required, set to the end time of the aggregation
        - StartTimeUnixNano is optional, but strongly encouraged for DataPoints
          having an AggregationTemporality field, as discussed below.

        Both TimeUnixNano and StartTimeUnixNano values are expressed as
        UNIX Epoch time in nanoseconds since 00:00:00 UTC on 1 January 1970.

        # TimeUnixNano

        This field is required, having consistent interpretation across
        DataPoint types.  TimeUnixNano is the moment corresponding to when
        the data point's aggregate value was captured.

        Data points with the 0 value for TimeUnixNano SHOULD be rejected
        by consumers.

        # StartTimeUnixNano

        StartTimeUnixNano in general allows detecting when a sequence of
        observations is unbroken.  This field indicates to consumers the
        start time for points with cumulative and delta
        AggregationTemporality, and it should be included whenever possible
        to support correct rate calculation.  Although it may be omitted
        when the start time is truly unknown, setting StartTimeUnixNano is
        strongly encouraged.
    v1NumberDataPoint:
      type: object
      properties:
        attributes:
          type: array
          description: |-
            The set of key/value pairs that uniquely identify the timeseries from
            where this point belongs. The list may be empty (may contain 0 elements).
            Attribute keys MUST be unique (it is not allowed to have more than one
            attribute with the same key).
          items:
            $ref: '#/components/schemas/v1KeyValue'
        startTimeUnixNano:
          type: string
          description: |-
            StartTimeUnixNano is optional but strongly encouraged, see the
            the detailed comments above Metric.

            Value is UNIX Epoch time in nanoseconds since 00:00:00 UTC on 1 January
            1970.
          format: uint64
        timeUnixNano:
          type: string
          description: |-
            TimeUnixNano is required, see the detailed comments above Metric.

            Value is UNIX Epoch time in nanoseconds since 00:00:00 UTC on 1 January
            1970.
          format: uint64
        asDouble:
          type: number
          format: double
        asInt:
          type: string
          format: int64
        exemplars:
          title: |-
            (Optional) List of exemplars collected from
            measurements that were used to form the data point
          type: array
          items:
            $ref: '#/components/schemas/v1Exemplar'
        flags:
          type: integer
          description: |-
            Flags that apply to this specific data point.  See DataPointFlags
            for the available flags and their meaning.
          format: int64
      description: |-
        NumberDataPoint is a single data point in a timeseries that describes the
        time-varying scalar value of a metric.
    v1Resource:
      type: object
      properties:
        attributes:
          type: array
          description: |-
            Set of attributes that describe the resource.
            Attribute keys MUST be unique (it is not allowed to have more than one
            attribute with the same key).
          items:
            $ref: '#/components/schemas/v1KeyValue'
        droppedAttributesCount:
          type: integer
          description: |-
            dropped_attributes_count is the number of dropped attributes. If the value is 0, then
            no attributes were dropped.
          format: int64
      description: Resource information.
    v1ResourceMetrics:
      type: object
      properties:
        resource:
          $ref: '#/components/schemas/v1Resource'
        scopeMetrics:
          type: array
          description: A list of metrics that originate from a resource.
          items:
            $ref: '#/components/schemas/v1ScopeMetrics'
        schemaUrl:
          type: string
          description: |-
            The Schema URL, if known. This is the identifier of the Schema that the resource data
            is recorded in. To learn more about Schema URL see
            https://opentelemetry.io/docs/specs/otel/schemas/#schema-url
            This schema_url applies to the data in the "resource" field. It does not apply
            to the data in the "scope_metrics" field which have their own schema_url field.
      description: A collection of ScopeMetrics from a Resource.
    v1ScopeMetrics:
      type: object
      properties:
        scope:
          $ref: '#/components/schemas/v1InstrumentationScope'
        metrics:
          type: array
          description: A list of metrics that originate from an instrumentation library.
          items:
            $ref: '#/components/schemas/v1Metric'
        schemaUrl:
          type: string
          description: |-
            The Schema URL, if known. This is the identifier of the Schema that the metric data
            is recorded in. To learn more about Schema URL see
            https://opentelemetry.io/docs/specs/otel/schemas/#schema-url
            This schema_url applies to all metrics in the "metrics" field.
      description: A collection of Metrics produced by an Scope.
    v1Sum:
      type: object
      properties:
        dataPoints:
          type: array
          items:
            $ref: '#/components/schemas/v1NumberDataPoint'
        aggregationTemporality:
          $ref: '#/components/schemas/v1AggregationTemporality'
        isMonotonic:
          type: boolean
          description: If "true" means that the sum is monotonic.
      description: |-
        Sum represents the type of a scalar metric that is calculated as a sum of all
        reported measurements over a time interval.
    v1Summary:
      type: object
      properties:
        dataPoints:
          type: array
          items:
            $ref: '#/components/schemas/v1SummaryDataPoint'
      description: |-
        Summary metric data are used to convey quantile summaries,
        a Prometheus (see: https://prometheus.io/docs/concepts/metric_types/#summary)
        and OpenMetrics (see: https://github.com/OpenObservability/OpenMetrics/blob/4dbf6075567ab43296eed941037c12951faafb92/protos/prometheus.proto#L45)
        data type. These data points cannot always be merged in a meaningful way.
        While they can be useful in some applications, histogram data points are
        recommended for new applications.
    v1SummaryDataPoint:
      type: object
      properties:
        attributes:
          type: array
          description: |-
            The set of key/value pairs that uniquely identify the timeseries from
            where this point belongs. The list may be empty (may contain 0 elements).
            Attribute keys MUST be unique (it is not allowed to have more than one
            attribute with the same key).
          items:
            $ref: '#/components/schemas/v1KeyValue'
        startTimeUnixNano:
          type: string
          description: |-
            StartTimeUnixNano is optional but strongly encouraged, see the
            the detailed comments above Metric.

            Value is UNIX Epoch time in nanoseconds since 00:00:00 UTC on 1 January
            1970.
          format: uint64
        timeUnixNano:
          type: string
          description: |-
            TimeUnixNano is required, see the detailed comments above Metric.

            Value is UNIX Epoch time in nanoseconds since 00:00:00 UTC on 1 January
            1970.
          format: uint64
        count:
          type: string
          description: count is the number of values in the population. Must be non-negative.
          format: uint64
        sum:
          type: number
          description: |-
            sum of the values in the population. If count is zero then this field
            must be zero.

            Note: Sum should only be filled out when measuring non-negative discrete
            events, and is assumed to be monotonic over the values of these events.
            Negative events *can* be recorded, but sum should not be filled out when
            doing so.  This is specifically to enforce compatibility w/ OpenMetrics,
            see: https://github.com/OpenObservability/OpenMetrics/blob/main/specification/OpenMetrics.md#summary
          format: double
        quantileValues:
          type: array
          description: |-
            (Optional) list of values at different quantiles of the distribution calculated
            from the current snapshot. The quantiles must be strictly increasing.
          items:
            $ref: '#/components/schemas/SummaryDataPointValueAtQuantile'
        flags:
          type: integer
          description: |-
            Flags that apply to this specific data point.  See DataPointFlags
            for the available flags and their meaning.
          format: int64
      description: |-
        SummaryDataPoint is a single data point in a timeseries that describes the
        time-varying values of a Summary metric.
x-original-swagger-version: "2.0"
