//
// V1ScopeMetrics.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
	import AnyCodable
#endif

@available(*, deprecated, renamed: "OTLP.V1ScopeMetrics")
typealias V1ScopeMetrics = OTLP.V1ScopeMetrics

extension OTLP {
	/** A collection of Metrics produced by an Scope. */
	struct V1ScopeMetrics: Codable, Hashable {
		var scope: V1InstrumentationScope?
		/** A list of metrics that originate from an instrumentation library. */
		var metrics: [V1Metric]?
		/** The Schema URL, if known. This is the identifier of the Schema that the metric data is recorded in. To learn more about Schema URL see https://opentelemetry.io/docs/specs/otel/schemas/#schema-url This schema_url applies to all metrics in the \"metrics\" field. */
		var schemaUrl: String?

		init(scope: V1InstrumentationScope? = nil, metrics: [V1Metric]? = nil, schemaUrl: String? = nil) {
			self.scope = scope
			self.metrics = metrics
			self.schemaUrl = schemaUrl
		}

		enum CodingKeys: String, CodingKey, CaseIterable {
			case scope
			case metrics
			case schemaUrl
		}

		// Encodable protocol methods

		func encode(to encoder: Encoder) throws {
			var container = encoder.container(keyedBy: CodingKeys.self)
			try container.encodeIfPresent(scope, forKey: .scope)
			try container.encodeIfPresent(metrics, forKey: .metrics)
			try container.encodeIfPresent(schemaUrl, forKey: .schemaUrl)
		}
	}
}
