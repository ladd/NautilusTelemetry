//
// V1ScopeSpans.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
	import AnyCodable
#endif

@available(*, deprecated, renamed: "OTLP.V1ScopeSpans")
typealias V1ScopeSpans = OTLP.V1ScopeSpans

extension OTLP {
	/** A collection of Spans produced by an InstrumentationScope. */
	struct V1ScopeSpans: Codable, Hashable {
		var scope: V1InstrumentationScope?
		/** A list of Spans that originate from an instrumentation scope. */
		var spans: [V1Span]?
		/** The Schema URL, if known. This is the identifier of the Schema that the span data is recorded in. To learn more about Schema URL see https://opentelemetry.io/docs/specs/otel/schemas/#schema-url This schema_url applies to all spans and span events in the \"spans\" field. */
		var schemaUrl: String?

		init(scope: V1InstrumentationScope? = nil, spans: [V1Span]? = nil, schemaUrl: String? = nil) {
			self.scope = scope
			self.spans = spans
			self.schemaUrl = schemaUrl
		}

		enum CodingKeys: String, CodingKey, CaseIterable {
			case scope
			case spans
			case schemaUrl
		}

		// Encodable protocol methods

		func encode(to encoder: Encoder) throws {
			var container = encoder.container(keyedBy: CodingKeys.self)
			try container.encodeIfPresent(scope, forKey: .scope)
			try container.encodeIfPresent(spans, forKey: .spans)
			try container.encodeIfPresent(schemaUrl, forKey: .schemaUrl)
		}
	}
}
