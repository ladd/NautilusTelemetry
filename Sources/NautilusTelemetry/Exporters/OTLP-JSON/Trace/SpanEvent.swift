//
// SpanEvent.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
	import AnyCodable
#endif

@available(*, deprecated, renamed: "OTLP.SpanEvent")
typealias SpanEvent = OTLP.SpanEvent

extension OTLP {
	/** Event is a time-stamped annotation of the span, consisting of user-supplied text description and key-value pairs. */
	struct SpanEvent: Codable, Hashable {
		/** time_unix_nano is the time the event occurred. */
		var timeUnixNano: String?
		/** name of the event. This field is semantically required to be set to non-empty string. */
		var name: String?
		/** attributes is a collection of attribute key/value pairs on the event. Attribute keys MUST be unique (it is not allowed to have more than one attribute with the same key). */
		var attributes: [V1KeyValue]?
		/** dropped_attributes_count is the number of dropped attributes. If the value is 0, then no attributes were dropped. */
		var droppedAttributesCount: Int64?

		init(timeUnixNano: String? = nil, name: String? = nil, attributes: [V1KeyValue]? = nil, droppedAttributesCount: Int64? = nil) {
			self.timeUnixNano = timeUnixNano
			self.name = name
			self.attributes = attributes
			self.droppedAttributesCount = droppedAttributesCount
		}

		enum CodingKeys: String, CodingKey, CaseIterable {
			case timeUnixNano
			case name
			case attributes
			case droppedAttributesCount
		}

		// Encodable protocol methods

		func encode(to encoder: Encoder) throws {
			var container = encoder.container(keyedBy: CodingKeys.self)
			try container.encodeIfPresent(timeUnixNano, forKey: .timeUnixNano)
			try container.encodeIfPresent(name, forKey: .name)
			try container.encodeIfPresent(attributes, forKey: .attributes)
			try container.encodeIfPresent(droppedAttributesCount, forKey: .droppedAttributesCount)
		}
	}
}
