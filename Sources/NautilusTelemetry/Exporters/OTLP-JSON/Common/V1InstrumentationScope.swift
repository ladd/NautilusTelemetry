//
// V1InstrumentationScope.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
	import AnyCodable
#endif

@available(*, deprecated, renamed: "OTLP.V1InstrumentationScope")
typealias V1InstrumentationScope = OTLP.V1InstrumentationScope

extension OTLP {
	/** InstrumentationScope is a message representing the instrumentation scope information such as the fully qualified name and version. */
	struct V1InstrumentationScope: Codable, Hashable {
		/** An empty instrumentation scope name means the name is unknown. */
		var name: String?
		var version: String?
		/** Additional attributes that describe the scope. [Optional]. Attribute keys MUST be unique (it is not allowed to have more than one attribute with the same key). */
		var attributes: [V1KeyValue]?
		var droppedAttributesCount: Int64?

		init(name: String? = nil, version: String? = nil, attributes: [V1KeyValue]? = nil, droppedAttributesCount: Int64? = nil) {
			self.name = name
			self.version = version
			self.attributes = attributes
			self.droppedAttributesCount = droppedAttributesCount
		}

		enum CodingKeys: String, CodingKey, CaseIterable {
			case name
			case version
			case attributes
			case droppedAttributesCount
		}

		// Encodable protocol methods

		func encode(to encoder: Encoder) throws {
			var container = encoder.container(keyedBy: CodingKeys.self)
			try container.encodeIfPresent(name, forKey: .name)
			try container.encodeIfPresent(version, forKey: .version)
			try container.encodeIfPresent(attributes, forKey: .attributes)
			try container.encodeIfPresent(droppedAttributesCount, forKey: .droppedAttributesCount)
		}
	}
}
