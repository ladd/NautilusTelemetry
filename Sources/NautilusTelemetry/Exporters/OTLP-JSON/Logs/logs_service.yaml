openapi: 3.0.1
info:
  title: opentelemetry/proto/collector/logs/v1/logs_service.proto
  version: version not set
servers:
- url: /
tags:
- name: LogsService
paths:
  /v1/logs:
    post:
      tags:
      - LogsService
      summary: |-
        For performance reasons, it is recommended to keep this RPC
        alive for the entire life of the application.
      operationId: LogsService_Export
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/v1ExportLogsServiceRequest'
        required: true
      responses:
        "200":
          description: A successful response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/v1ExportLogsServiceResponse'
        default:
          description: An unexpected error response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/rpcStatus'
      x-codegen-request-body-name: body
components:
  schemas:
    protobufAny:
      type: object
      properties:
        '@type':
          type: string
      additionalProperties:
        type: object
    rpcStatus:
      type: object
      properties:
        code:
          type: integer
          format: int32
        message:
          type: string
        details:
          type: array
          items:
            $ref: '#/components/schemas/protobufAny'
    v1AnyValue:
      type: object
      properties:
        stringValue:
          type: string
        boolValue:
          type: boolean
        intValue:
          type: string
          format: int64
        doubleValue:
          type: number
          format: double
        arrayValue:
          $ref: '#/components/schemas/v1ArrayValue'
        kvlistValue:
          $ref: '#/components/schemas/v1KeyValueList'
        bytesValue:
          pattern: "^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$"
          type: string
          format: byte
      description: |-
        AnyValue is used to represent any type of attribute value. AnyValue may contain a
        primitive value such as a string or integer or it may contain an arbitrary nested
        object containing arrays, key-value lists and primitives.
    v1ArrayValue:
      type: object
      properties:
        values:
          type: array
          description: Array of values. The array may be empty (contain 0 elements).
          items:
            $ref: '#/components/schemas/v1AnyValue'
      description: |-
        ArrayValue is a list of AnyValue messages. We need ArrayValue as a message
        since oneof in AnyValue does not allow repeated fields.
    v1ExportLogsPartialSuccess:
      type: object
      properties:
        rejectedLogRecords:
          type: string
          description: |-
            The number of rejected log records.

            A `rejected_<signal>` field holding a `0` value indicates that the
            request was fully accepted.
          format: int64
        errorMessage:
          type: string
          description: |-
            A developer-facing human-readable message in English. It should be used
            either to explain why the server rejected parts of the data during a partial
            success or to convey warnings/suggestions during a full success. The message
            should offer guidance on how users can address such issues.

            error_message is an optional field. An error_message with an empty value
            is equivalent to it not being set.
    v1ExportLogsServiceRequest:
      type: object
      properties:
        resourceLogs:
          type: array
          description: |-
            An array of ResourceLogs.
            For data coming from a single resource this array will typically contain one
            element. Intermediary nodes (such as OpenTelemetry Collector) that receive
            data from multiple origins typically batch the data before forwarding further and
            in that case this array will contain multiple elements.
          items:
            $ref: '#/components/schemas/v1ResourceLogs'
    v1ExportLogsServiceResponse:
      type: object
      properties:
        partialSuccess:
          $ref: '#/components/schemas/v1ExportLogsPartialSuccess'
    v1InstrumentationScope:
      type: object
      properties:
        name:
          type: string
          description: An empty instrumentation scope name means the name is unknown.
        version:
          type: string
        attributes:
          type: array
          description: |-
            Additional attributes that describe the scope. [Optional].
            Attribute keys MUST be unique (it is not allowed to have more than one
            attribute with the same key).
          items:
            $ref: '#/components/schemas/v1KeyValue'
        droppedAttributesCount:
          type: integer
          format: int64
      description: |-
        InstrumentationScope is a message representing the instrumentation scope information
        such as the fully qualified name and version.
    v1KeyValue:
      type: object
      properties:
        key:
          type: string
        value:
          $ref: '#/components/schemas/v1AnyValue'
      description: |-
        KeyValue is a key-value pair that is used to store Span attributes, Link
        attributes, etc.
    v1KeyValueList:
      type: object
      properties:
        values:
          type: array
          description: |-
            A collection of key/value pairs of key-value pairs. The list may be empty (may
            contain 0 elements).
            The keys MUST be unique (it is not allowed to have more than one
            value with the same key).
          items:
            $ref: '#/components/schemas/v1KeyValue'
      description: |-
        KeyValueList is a list of KeyValue messages. We need KeyValueList as a message
        since `oneof` in AnyValue does not allow repeated fields. Everywhere else where we need
        a list of KeyValue messages (e.g. in Span) we use `repeated KeyValue` directly to
        avoid unnecessary extra wrapping (which slows down the protocol). The 2 approaches
        are semantically equivalent.
    v1LogRecord:
      title: |-
        A log record according to OpenTelemetry Log Data Model:
        https://github.com/open-telemetry/oteps/blob/main/text/logs/0097-log-data-model.md
      type: object
      properties:
        timeUnixNano:
          type: string
          description: |-
            time_unix_nano is the time when the event occurred.
            Value is UNIX Epoch time in nanoseconds since 00:00:00 UTC on 1 January 1970.
            Value of 0 indicates unknown or missing timestamp.
          format: uint64
        observedTimeUnixNano:
          type: string
          description: |-
            Time when the event was observed by the collection system.
            For events that originate in OpenTelemetry (e.g. using OpenTelemetry Logging SDK)
            this timestamp is typically set at the generation time and is equal to Timestamp.
            For events originating externally and collected by OpenTelemetry (e.g. using
            Collector) this is the time when OpenTelemetry's code observed the event measured
            by the clock of the OpenTelemetry code. This field MUST be set once the event is
            observed by OpenTelemetry.

            For converting OpenTelemetry log data to formats that support only one timestamp or
            when receiving OpenTelemetry log data by recipients that support only one timestamp
            internally the following logic is recommended:
              - Use time_unix_nano if it is present, otherwise use observed_time_unix_nano.

            Value is UNIX Epoch time in nanoseconds since 00:00:00 UTC on 1 January 1970.
            Value of 0 indicates unknown or missing timestamp.
          format: uint64
        severityNumber:
          $ref: '#/components/schemas/v1SeverityNumber'
        severityText:
          type: string
          description: |-
            The severity text (also known as log level). The original string representation as
            it is known at the source. [Optional].
        body:
          $ref: '#/components/schemas/v1AnyValue'
        attributes:
          type: array
          description: |-
            Additional attributes that describe the specific event occurrence. [Optional].
            Attribute keys MUST be unique (it is not allowed to have more than one
            attribute with the same key).
          items:
            $ref: '#/components/schemas/v1KeyValue'
        droppedAttributesCount:
          type: integer
          format: int64
        flags:
          type: integer
          description: |-
            Flags, a bit field. 8 least significant bits are the trace flags as
            defined in W3C Trace Context specification. 24 most significant bits are reserved
            and must be set to 0. Readers must not assume that 24 most significant bits
            will be zero and must correctly mask the bits when reading 8-bit trace flag (use
            flags & LOG_RECORD_FLAGS_TRACE_FLAGS_MASK). [Optional].
          format: int64
        traceId:
          pattern: "^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$"
          type: string
          description: |-
            A unique identifier for a trace. All logs from the same trace share
            the same `trace_id`. The ID is a 16-byte array. An ID with all zeroes OR
            of length other than 16 bytes is considered invalid (empty string in OTLP/JSON
            is zero-length and thus is also invalid).

            This field is optional.

            The receivers SHOULD assume that the log record is not associated with a
            trace if any of the following is true:
              - the field is not present,
              - the field contains an invalid value.
          format: byte
        spanId:
          pattern: "^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$"
          type: string
          description: |-
            A unique identifier for a span within a trace, assigned when the span
            is created. The ID is an 8-byte array. An ID with all zeroes OR of length
            other than 8 bytes is considered invalid (empty string in OTLP/JSON
            is zero-length and thus is also invalid).

            This field is optional. If the sender specifies a valid span_id then it SHOULD also
            specify a valid trace_id.

            The receivers SHOULD assume that the log record is not associated with a
            span if any of the following is true:
              - the field is not present,
              - the field contains an invalid value.
          format: byte
    v1Resource:
      type: object
      properties:
        attributes:
          type: array
          description: |-
            Set of attributes that describe the resource.
            Attribute keys MUST be unique (it is not allowed to have more than one
            attribute with the same key).
          items:
            $ref: '#/components/schemas/v1KeyValue'
        droppedAttributesCount:
          type: integer
          description: |-
            dropped_attributes_count is the number of dropped attributes. If the value is 0, then
            no attributes were dropped.
          format: int64
      description: Resource information.
    v1ResourceLogs:
      type: object
      properties:
        resource:
          $ref: '#/components/schemas/v1Resource'
        scopeLogs:
          type: array
          description: A list of ScopeLogs that originate from a resource.
          items:
            $ref: '#/components/schemas/v1ScopeLogs'
        schemaUrl:
          type: string
          description: |-
            The Schema URL, if known. This is the identifier of the Schema that the resource data
            is recorded in. To learn more about Schema URL see
            https://opentelemetry.io/docs/specs/otel/schemas/#schema-url
            This schema_url applies to the data in the "resource" field. It does not apply
            to the data in the "scope_logs" field which have their own schema_url field.
      description: A collection of ScopeLogs from a Resource.
    v1ScopeLogs:
      type: object
      properties:
        scope:
          $ref: '#/components/schemas/v1InstrumentationScope'
        logRecords:
          type: array
          description: A list of log records.
          items:
            $ref: '#/components/schemas/v1LogRecord'
        schemaUrl:
          type: string
          description: |-
            The Schema URL, if known. This is the identifier of the Schema that the log data
            is recorded in. To learn more about Schema URL see
            https://opentelemetry.io/docs/specs/otel/schemas/#schema-url
            This schema_url applies to all logs in the "logs" field.
      description: A collection of Logs produced by a Scope.
    v1SeverityNumber:
      type: string
      description: |-
        Possible values for LogRecord.SeverityNumber.

         - SEVERITY_NUMBER_UNSPECIFIED: UNSPECIFIED is the default SeverityNumber, it MUST NOT be used.
      default: SEVERITY_NUMBER_UNSPECIFIED
      enum:
      - SEVERITY_NUMBER_UNSPECIFIED
      - SEVERITY_NUMBER_TRACE
      - SEVERITY_NUMBER_TRACE2
      - SEVERITY_NUMBER_TRACE3
      - SEVERITY_NUMBER_TRACE4
      - SEVERITY_NUMBER_DEBUG
      - SEVERITY_NUMBER_DEBUG2
      - SEVERITY_NUMBER_DEBUG3
      - SEVERITY_NUMBER_DEBUG4
      - SEVERITY_NUMBER_INFO
      - SEVERITY_NUMBER_INFO2
      - SEVERITY_NUMBER_INFO3
      - SEVERITY_NUMBER_INFO4
      - SEVERITY_NUMBER_WARN
      - SEVERITY_NUMBER_WARN2
      - SEVERITY_NUMBER_WARN3
      - SEVERITY_NUMBER_WARN4
      - SEVERITY_NUMBER_ERROR
      - SEVERITY_NUMBER_ERROR2
      - SEVERITY_NUMBER_ERROR3
      - SEVERITY_NUMBER_ERROR4
      - SEVERITY_NUMBER_FATAL
      - SEVERITY_NUMBER_FATAL2
      - SEVERITY_NUMBER_FATAL3
      - SEVERITY_NUMBER_FATAL4
x-original-swagger-version: "2.0"
