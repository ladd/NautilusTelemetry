//
// V1ScopeLogs.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
	import AnyCodable
#endif

@available(*, deprecated, renamed: "OTLP.V1ScopeLogs")
typealias V1ScopeLogs = OTLP.V1ScopeLogs

extension OTLP {
	/** A collection of Logs produced by a Scope. */
	struct V1ScopeLogs: Codable, Hashable {
		var scope: V1InstrumentationScope?
		/** A list of log records. */
		var logRecords: [V1LogRecord]?
		/** The Schema URL, if known. This is the identifier of the Schema that the log data is recorded in. To learn more about Schema URL see https://opentelemetry.io/docs/specs/otel/schemas/#schema-url This schema_url applies to all logs in the \"logs\" field. */
		var schemaUrl: String?

		init(scope: V1InstrumentationScope? = nil, logRecords: [V1LogRecord]? = nil, schemaUrl: String? = nil) {
			self.scope = scope
			self.logRecords = logRecords
			self.schemaUrl = schemaUrl
		}

		enum CodingKeys: String, CodingKey, CaseIterable {
			case scope
			case logRecords
			case schemaUrl
		}

		// Encodable protocol methods

		func encode(to encoder: Encoder) throws {
			var container = encoder.container(keyedBy: CodingKeys.self)
			try container.encodeIfPresent(scope, forKey: .scope)
			try container.encodeIfPresent(logRecords, forKey: .logRecords)
			try container.encodeIfPresent(schemaUrl, forKey: .schemaUrl)
		}
	}
}
